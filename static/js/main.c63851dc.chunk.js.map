{"version":3,"sources":["firebase.js","services/PaymentServices.js","components/PayeePayment.js","components/Remittance.js","components/DataTableRow.js","components/TableHeading.js","components/DataTable.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","db","firestore","collection","page","end","orderBy","limit","direction","startAfter","limitToLast","endBefore","start","PayeePayment","payee","payment","Attention","Phone","Fax","className","Address","Address1","Address2","City","StateOrProvince","PostalCode","Country","PAN","Exp","CVV","Remittance","remittance","PayorName","PayorId","InvoiceNo","Amount","DataTableRow","data","Payee","Payment","map","value","index","TableHeading","scope","DataTable","props","useCollection","PaymentDataService","snapshot","loading","error","fs","firstSeen","handleChange","event","onClick","docs","SubmissionDate","size","target","JSON","stringify","style","fontSize","doc","float","App","useState","setPage","newPage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c63851dc.chunk.js","sourcesContent":["import firebase from \"firebase\";\nimport \"firebase/firestore\";\n\nlet config = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_ID\n};\n\nfirebase.initializeApp(config);\n\nexport default firebase.firestore(); ","import firebase from \"../firebase\";\n\nconst db = firebase.collection('Payments');\n\nconst getPage = (page) => {\n    if (page.end == \"\"){\n        return db.orderBy('Payee.SubmissionDate','desc').limit(4);\n    } else if (page.direction == \"next\") {\n        return db.orderBy('Payee.SubmissionDate','desc').limit(4).startAfter(page.end);\n    } else {\n        return db.orderBy('Payee.SubmissionDate','desc').limitToLast(4).endBefore(page.start);\n    }\n}\n\nexport default {\n    getPage,\n};","import React from 'react';\n\nconst PayeePayment = ({payee, payment}) => {\n    return (\n        <div>\n            <h3>{payee.Attention}</h3>\n            <p>Phone: {payee.Phone}</p>\n            <p>Fax: {payee.Fax}</p>\n            <p className=\"text-secondary\">{payee.Address.Address1} {payee.Address.Address2}\n            {payee.Address.City}, {payee.Address.StateOrProvince} {payee.Address.PostalCode} {payee.Address.Country}</p>\n            <p className=\"text-secondary\">PAN: {payment.PAN} </p>\n            <p className=\"text-secondary\">Exp: {payment.Exp} </p>\n            <p className=\"text-secondary\">CVV: {payment.CVV} </p>\n        </div>\n    )\n};\n\nexport default PayeePayment;\n","import React from 'react';\n\nconst Remittance = ({remittance}) => {\n    return (\n        <div>\n            <h4>{remittance.PayorName}</h4>\n            <p>PayorId: {remittance.PayorId}</p>\n            <p>InvoiceNo: {remittance.InvoiceNo}</p>\n            <p className=\"text-secondary\">Amount: {remittance.Amount}</p>\n        </div>\n    );\n};\n\nexport default Remittance;\n","import React from 'react';\n\nimport PayeePayment from \"./PayeePayment\";\nimport Remittance from \"./Remittance\";\n\nconst DataTableRow = ({data}) => {\n    return (\n        <>\n        <td>\n            <PayeePayment payee={data.Payee} payment={data.Payment}/>\n        </td>\n        <td>\n            <div className=\"row\">\n                {data.Remittance.map((value, index) => (\n                    <div className=\"col\" key={index}>\n                        <Remittance remittance={value}/>\n                    </div>\n                ))\n                }\n            </div>\n        </td>\n        </>\n    );\n};\n\nexport default DataTableRow;\n","import React from 'react';\n\nconst TableHeading = () => {\n    return (\n        <thead>\n            <tr>\n                <th scope=\"col\">Payee</th>\n                <th scope=\"col\">Remittance</th>\n            </tr>\n        </thead>\n    );\n};\n\nexport default TableHeading;","import React from \"react\";\nimport {useCollection} from \"react-firebase-hooks/firestore\";\n\nimport PaymentDataService from \"../services/PaymentServices\";\nimport DataTableRow from \"./DataTableRow\";\nimport TableHeading from \"./TableHeading\";\n\nconst DataTable = (props) => {\n    const [snapshot, loading, error] = useCollection(PaymentDataService.getPage(props.page));\n\n    let fs = props.page.firstSeen;\n    if(props.page.firstSeen === \"\" && !loading){\n        fs = snapshot.docs[0].data().Payee.SubmissionDate;\n    }\n    \n    function handleChange(event) {\n        props.onClick({\n            firstSeen: fs,\n            start: snapshot.docs[0].data().Payee.SubmissionDate,\n            end: snapshot.docs[snapshot.size - 1].data().Payee.SubmissionDate,\n            direction: event.target.value\n        })\n    };\n\n    return (\n    <div className=\"container\">\n        {error && <strong>Error: {JSON.stringify(error)}</strong>}\n        {loading && <span>Collection: Loading...</span>}\n        <table className=\"table text-left\" style={{fontSize: '12px'}}>\n        <TableHeading/>\n            <tbody>\n                {!loading &&\n                    snapshot && \n                    snapshot.docs.map((doc, index) => (\n                        <tr key={index}>\n                            <DataTableRow data={doc.data()}/>\n                        </tr>\n                    ))\n                }\n            </tbody>\n        </table>\n\n        {!loading &&\n        props.page.firstSeen > snapshot.docs[0].data().Payee.SubmissionDate &&\n        <button className=\"btn btn-primary\"\n            style={{float:\"left\"}}\n            value = \"prev\"\n            onClick = {handleChange}\n        >\n        Previous\n        </button>\n        }    \n        \n        {!loading &&\n        snapshot.size === 4 &&\n        <button className=\"btn btn-primary\"\n            style={{float:\"right\"}}\n            value = \"next\"\n            onClick={handleChange}\n        > \n        Next \n        </button>\n        }\n    </div>\n    )\n\n}\n\nexport default DataTable;","import React, {useState} from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport DataTable from \"./components/DataTable\";\n\nfunction App() {\n  const [page, setPage] = useState({\n    firstSeen: \"\",\n    start: \"\",\n    end: \"\",\n    direction: \"next\"\n  });\n\n  function handleChange(newPage) {\n    setPage({\n      firstSeen: newPage.firstSeen,\n      start: newPage.start,\n      end: newPage.end,\n      direction: newPage.direction\n    });\n  };\n  \n  return (\n    <div className=\"App\">\n        <h1>Paymerang Code Challenge</h1>\n        <DataTable page={page} onClick={handleChange} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}